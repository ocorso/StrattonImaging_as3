/* Ported from Grant Skinner's AS2 CollisionDetection class */package com.bigspaceship.utils{	import flash.display.Bitmap;	import flash.display.BlendMode;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.geom.ColorTransform;	public class CollisionDetection	{		static public function hitTest($clip1:DisplayObject,$clip2:DisplayObject,$alphaTolerance:Number = 255):Rectangle		{			// get bounds			try			{				var bounds1:Rectangle = $clip1.getBounds($clip1.stage).clone();				var bounds2:Rectangle = $clip2.getBounds($clip2.stage).clone();			}			catch($e:Error) { throw new Error("CollisionDetection.hitTest: Both DisplayObjects must be on the stage to compare."); return null; }//			trace(bounds1 + " v. " + bounds2);			// rule out anything that we know can't collide			if (((bounds1.width+bounds1.x < bounds2.x) || (bounds2.width+bounds2.x < bounds1.x)) || ((bounds1.height+bounds1.y < bounds2.y) || (bounds2.height+bounds2.y < bounds1.y)) ) return null;			// determine test area boundaries:			var bounds:Rectangle = new Rectangle();			bounds.x	  = Math.max(bounds1.x,bounds2.x);			bounds.width  = Math.min(bounds1.width,bounds2.width);			bounds.y	  = Math.max(bounds1.y,bounds2.y);			bounds.height = Math.min(bounds1.height,bounds2.height);//			trace(bounds);					// set up the image to use:			var bmp:BitmapData = new BitmapData(bounds.width,bounds.height,false);					// draw in the first image:			var m:Matrix = $clip1.transform.concatenatedMatrix.clone();				m.tx -= bounds.x;				m.ty -= bounds.y;			bmp.draw($clip1,m,new ColorTransform(1,1,1,1,255,-255,-255,$alphaTolerance));					// overlay the second image:			m = $clip2.transform.concatenatedMatrix.clone();				m.tx -= bounds.x;				m.ty -= bounds.y;						bmp.draw($clip2,m,new ColorTransform(1,1,1,1,255,255,255,$alphaTolerance),BlendMode.DIFFERENCE);					// find the intersection:			var intersection:Rectangle = bmp.getColorBoundsRect(0xFFFFFFFF,0xFF00FFFF).clone();					bmp.dispose();//			$clip1.stage.addChild(new Bitmap(bmp));					// if there is no intersection, return null:			if(intersection.width == 0) return null;					// adjust the intersection to account for the bounds:			intersection.x += bounds.x;			intersection.y += bounds.y;//			trace(intersection);					return intersection;		}	};};